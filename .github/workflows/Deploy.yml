name: Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:
defaults:
  run:
    shell: pwsh
jobs:
  Deploy:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2   
      with:
        fetch-depth: 50
    - name: Discover Changes
      run: |
        $changedModules = $(git diff --name-only HEAD HEAD~40)
        $changedModules
        $files = $changedModules -split ' ' | ForEach-Object{[System.IO.FileInfo] $_}
        $modules = @()

        foreach ($file in $files) 
        {
            if((Test-Path $file.FullName)){
                $file
                $fileDirectoryParent = $file.Directory.Parent
                if ($fileDirectoryParent -and $fileDirectoryParent.Name -eq "Modules") {
                    $modules += $file.Directory
                }
            }
        }
        $changedModulesPath = mkdir -Name "StagingChangedModules\" -Force
        $modules.Length
        For ($i=0; $i -lt $modules.Length; $i++)
        {
            $module = $modules[$i]
            Copy-Item -Path $module.FullName -Destination $changedModulesPath -Recurse -Force
        }
        git status
    - name: Update Changed Modules
      run: |
        $moduleFolders = Get-ChildItem .\StagingChangedModules
        if(!$moduleFolders) {
            throw "No modules to update."
        }
        foreach ($item in $moduleFolders){
            $moduleName = $item.Name
            $manifest = Get-ChildItem $item.PSPath | Where-Object{$_.Name -like "*psd1"}

            if(!$manifest){
                Write-Error "The manifest for $moduleName was not found"
            }

            $content = Get-Content $manifest.PSPath | ForEach-Object{
                $_
                if ($_ -match "ModuleVersion"){
                    $version = [System.Version]($_ -split "'")[1]
                }
            }

        $major = 0
            $minor = 0
            $build = 0
            $minorRev = 1

            if($version.Major -gt 0){$major = $version.Major}
            if($version.Minor -gt 0){$minor = $version.Minor}
            if($version.Build -gt 0){$build = $version.Build}
            if($version.MinorRevision -gt 0){$minorRev = $version.MinorRevision + 1}

            $updatedVersion = New-Object -TypeName system.Version -ArgumentList $major, $minor, $build, $minorRev

            $Path = ".\Modules\" +($manifest.PSChildName).Substring(0, $manifest.PSChildName.length - 5 ) +  "\"+ ($manifest.PSChildName)
            #Update-ModuleManifest -Path $Path -ModuleVersion $updatedVersion
            
            $tempManifest = $content | ForEach-Object{
                if ($_ -match "ModuleVersion"){
                    "ModuleVersion = '$($updatedVersion.ToString())'"
                }
                else {
                    $_
                }
            }
            $tempManifest | Set-Content $Path
            
            Write-Host "$moduleName's version was updated from $version to $updatedVersion"
            
            $content = Get-Content $Path | ForEach-Object{
                $_
                if ($_ -match "ModuleVersion"){
                    $version = [System.Version]($_ -split "'")[1]
                }
            }
            Write-Host "$version - $updatedVersion"
        }

